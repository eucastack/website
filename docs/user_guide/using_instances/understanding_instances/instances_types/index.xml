<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>EucaStack – Instance Basics</title><link>https://www.eucastack.io/docs/user_guide/using_instances/understanding_instances/instances_types/</link><description>Recent content in Instance Basics on EucaStack</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://www.eucastack.io/docs/user_guide/using_instances/understanding_instances/instances_types/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Virtual Machine Types</title><link>https://www.eucastack.io/docs/user_guide/using_instances/understanding_instances/instances_types/vm_types/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.eucastack.io/docs/user_guide/using_instances/understanding_instances/instances_types/vm_types/</guid><description>
&lt;p>A virtual machine type, known as a VM type, defines the number of CPUs, the size of memory, and the size of storage that is given to an instance when it boots. There are five pre-defined VM types in Eucalyptus. You can change the quantity of resources associated with each of the five VM types, but you cannot change the name of the VM types or the number of VM types available. If you customize the sizes they must be well-ordered. That means that the CPU, memory, and storage sizes of the next VM type must be equal to, or larger than, the size of the preceding VM type. &lt;/p>
&lt;p>The VM type used to instantiate an EMI must have a defined disk size larger than the EMI file. If a 6GB EMI is loaded into an instance with a VM type defined with a 5GB disk, it will fail to boot. The status of the instance will show as &lt;em>pending&lt;/em> .  The pending status is the result of the fact that the Walrus cannot finish downloading the image to the Node Controller because the Node Controller has not allotted sufficient disk space for the download. Starting with Eucalyptus 3.2, if the user attempts to launch an instance with a VM type that is too small, they will receive an on-screen warning and the operation will terminate.&lt;/p>
&lt;h2 id="available-vm-types">Available VM Types&lt;/h2>
&lt;p>Eucalyptus, like AWS, offers families of VM types. These families are composed of varying combinations of CPU, disk size, and memory. Eucalyptus offers enough VM types to give you the flexibility to choose the appropriate mix of resources for your applications. For the best experience, we recommend that you launch instance types that are appropriate for your applications.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>This family includes the M1 and M3 VM types. These types provide a balance of CPU, memory, and network resources, which makes them a good choice for many applications. The VM types in this family range in size from one virtual CPU with two GB of RAM to eight virtual CPUs with 30 GB of RAM. The balance of resources makes them ideal for running small and mid-size databases, more memory-hungry data processing tasks, caching fleets, and backend servers. M1 types offer smaller instance sizes with moderate CPU performance. M3 types offer larger number of virtual CPUs that provide higher performance. We recommend you use M3 instances if you need general-purpose instances with demanding CPU requirements.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>This family includes the C1 and CC2 instance types, and is geared towards applications that benefit from high compute power. Compute-optimized VM types have a higher ratio of virtual CPUs to memory than other families but share the NCs with non optimized ones. We recommend this type if you are running any CPU-bound scale-out applications. CC2 instances provide high core count (32 virtual CPUs) and support for cluster networking. C1 instances are available in smaller sizes and are ideal for scaled-out applications at massive scale.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>This family includes the CR1 and M2 VM types and is designed for memory-intensive applications. We recommend these VM types for performance-sensitive database, where your application is memory-bound. CR1 VM types provide more memory and faster CPU than do M2 types. CR1 instances also support cluster networking for bandwidth intensive applications. M2 types are available in smaller sizes, and are an excellent option for many memory-bound applications.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>This Micro family contains the T1 VM type. The t1.micro provides a small amount of consistent CPU resources and allows you to increase CPU capacity in short bursts when additional cycles are available. We recommend this type for lower throughput applications like a proxy server or administrative applications, or for low-traffic websites that occasionally require additional compute cycles. We do not recommend this VM type for applications that require sustained CPU performance.
The following tables list each VM type Eucalyptus offers. Each type is listed in its associate VM family.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">Instance Type&lt;/th>
&lt;th style="text-align:left">Virtual CPU&lt;/th>
&lt;th style="text-align:left">Disk Size&lt;/th>
&lt;th style="text-align:left">Memory&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">m1.small&lt;/td>
&lt;td style="text-align:left">1&lt;/td>
&lt;td style="text-align:left">5&lt;/td>
&lt;td style="text-align:left">256&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">m1.medium&lt;/td>
&lt;td style="text-align:left">1&lt;/td>
&lt;td style="text-align:left">10&lt;/td>
&lt;td style="text-align:left">512&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">m1.large&lt;/td>
&lt;td style="text-align:left">2&lt;/td>
&lt;td style="text-align:left">10&lt;/td>
&lt;td style="text-align:left">512&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">m1.xlarge&lt;/td>
&lt;td style="text-align:left">2&lt;/td>
&lt;td style="text-align:left">10&lt;/td>
&lt;td style="text-align:left">1024&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">m3.xlarge&lt;/td>
&lt;td style="text-align:left">4&lt;/td>
&lt;td style="text-align:left">15&lt;/td>
&lt;td style="text-align:left">2048&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">m3.2xlarge&lt;/td>
&lt;td style="text-align:left">4&lt;/td>
&lt;td style="text-align:left">30&lt;/td>
&lt;td style="text-align:left">4096&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">Instance Type&lt;/th>
&lt;th style="text-align:left">Virtual Cores&lt;/th>
&lt;th style="text-align:left">Disk Size&lt;/th>
&lt;th style="text-align:left">Memory&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">c1.medium&lt;/td>
&lt;td style="text-align:left">2&lt;/td>
&lt;td style="text-align:left">10&lt;/td>
&lt;td style="text-align:left">512&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">c1.xlarge&lt;/td>
&lt;td style="text-align:left">2&lt;/td>
&lt;td style="text-align:left">10&lt;/td>
&lt;td style="text-align:left">2048&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">cc1.4xlarge&lt;/td>
&lt;td style="text-align:left">8&lt;/td>
&lt;td style="text-align:left">60&lt;/td>
&lt;td style="text-align:left">3072&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">cc2.8xlarge&lt;/td>
&lt;td style="text-align:left">16&lt;/td>
&lt;td style="text-align:left">120&lt;/td>
&lt;td style="text-align:left">6144&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">Instance Type&lt;/th>
&lt;th style="text-align:left">Virtual Cores&lt;/th>
&lt;th style="text-align:left">Disk Size&lt;/th>
&lt;th style="text-align:left">Memory&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">m2.xlarge&lt;/td>
&lt;td style="text-align:left">2&lt;/td>
&lt;td style="text-align:left">10&lt;/td>
&lt;td style="text-align:left">2048&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">m2.2xlarge&lt;/td>
&lt;td style="text-align:left">2&lt;/td>
&lt;td style="text-align:left">30&lt;/td>
&lt;td style="text-align:left">4096&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">m2.4xlarge&lt;/td>
&lt;td style="text-align:left">8&lt;/td>
&lt;td style="text-align:left">60&lt;/td>
&lt;td style="text-align:left">4096&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">cr1.8xlarge&lt;/td>
&lt;td style="text-align:left">16&lt;/td>
&lt;td style="text-align:left">240&lt;/td>
&lt;td style="text-align:left">16384&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">Instance Type&lt;/th>
&lt;th style="text-align:left">Virtual Cores&lt;/th>
&lt;th style="text-align:left">Disk Size&lt;/th>
&lt;th style="text-align:left">Memory&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">t1.micro&lt;/td>
&lt;td style="text-align:left">1&lt;/td>
&lt;td style="text-align:left">5&lt;/td>
&lt;td style="text-align:left">256&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>Docs: Ephemeral Linux Instances</title><link>https://www.eucastack.io/docs/user_guide/using_instances/understanding_instances/instances_types/ephemeral_linux_instances/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.eucastack.io/docs/user_guide/using_instances/understanding_instances/instances_types/ephemeral_linux_instances/</guid><description>
&lt;p>Instance store-backed instances are ephemeral instances. This means that any changes made to a running instance are lost if the instance is either purposely or accidentally terminated. Applications running in ephemeral instances should write their data to persistent storage for safe keeping. Persistent storage available to instances includes Storage Controller volumes and the Walrus.&lt;/p>
&lt;p>As an instance store-backed instance is launched, several files are brought together using loop devices on the Node Controller. As these files are brought together they form what looks like a disk to the instance&amp;rsquo;s operating system. The illustration below lists a some of the files that make up a running instance. Notice that the EKI, EMI, and ERI images are presented to the instance&amp;rsquo;s operating system as the partition &lt;em>/dev/sda1&lt;/em> and are mounted as the &lt;em>/&lt;/em> file system.&lt;/p>
&lt;p>&lt;img src="https://www.eucastack.io/images/EC2-Backed-Ephemeral-Instances.png" alt="image">&lt;/p>
&lt;p>Assume that the illustration above shows some of the files that make up an instance that was launched in a vmtype with 2GB of storage. Notice that the &lt;em>eki-&lt;/em>* , &lt;em>emi-&lt;/em>* , and &lt;em>eri-&lt;/em>* files have been downloaded from the Walrus and cached on the Node Controller. These three files consume around 1.06GB of storage space. Notice also that a swap file was automatically created for the instance. The swap file has the string &lt;em>swap&lt;/em> in its name and the file is approximately 500MB in size. It is presented to the instance&amp;rsquo;s operating system as the partition &lt;em>/dev/sda3&lt;/em> .&lt;/p>
&lt;p>This means the EKI, ERI, EMI, and swap files have consumed approximately 1.5GB of the available 2GB of storage space. The remaining 500GB is allocated to the file with the string &lt;em>ext3&lt;/em> in its name. In our example, this space is formatted as an ext3 file system and is made available to the instance as the disk partition &lt;em>/dev/sda2&lt;/em> , and is actually mounted to the &lt;em>/mnt&lt;/em> directory in the instance. An example of this configuration is shown below.&lt;/p>
&lt;p>&lt;img src="https://www.eucastack.io/images/Ephemeral-Disk-Illustration.png" alt="image">&lt;/p></description></item><item><title>Docs: EBS-Backed Instances</title><link>https://www.eucastack.io/docs/user_guide/using_instances/understanding_instances/instances_types/ebs_backed_instances/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.eucastack.io/docs/user_guide/using_instances/understanding_instances/instances_types/ebs_backed_instances/</guid><description>
&lt;h1 id="ebs-backed-instances">EBS-Backed Instances&lt;/h1>
&lt;p>Eucalyptus supports two different types of instances; instance store-backed instances and EBS-backed instances. This section describes EBS-backed instances.&lt;/p>
&lt;p>With EBS-backed instances you are booting an instance from a volume rather than a bundled EMI image. The boot volume is created from a snapshot of a root device volume. The boot volume is persistent so changes to the instance are persistent.&lt;/p>
&lt;div class="alert alert-success" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
Linux boot-from-EBS instances do not require EKI and ERI images like paravirtual instance store-backed instances.
&lt;/div>
&lt;p>&lt;img src="https://www.eucastack.io/images/EBS-Backed-Instances.png" alt="image">&lt;/p></description></item></channel></rss>